from flask import Flask, request, jsonify
import os
from io import BytesIO
from PIL import Image
from ultralytics import YOLO
from google.cloud import storage
import shutil

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "eb1d39b.json"

app = Flask(__name__)
model = YOLO('model1800.pt')

source_bucket_name = 'odis-bucket'  
destination_bucket_name = 'filtered-images-bucket'  

storage_client = storage.Client()
source_bucket = storage_client.bucket(source_bucket_name)
destination_bucket = storage_client.bucket(destination_bucket_name)

# Define the list of numbers with 0-based indexing
num_list = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144']

@app.route('/')
def index():
    return """
    <form method="POST" action="/filter_images">
        Enter a rider number, 0-144: <input type="text" name="rider_number"><br>
        <input type="submit" value="Submit">
    </form>
    """

@app.route('/filter_images', methods=['POST'])
def filter_images():
    rider_number = request.form.get("rider_number")
    class_name = None
    
    if rider_number:
        try:
            position = int(rider_number)
            if position < 0 or position >= len(num_list):
                return "Please enter a valid rider number."
            class_name = position  
        except ValueError:
            return "Please enter a valid number."
    
    if class_name is not None:
        filtered_images = []

        # Create a temporary directory for downloading images
        temp_dir = './temp_images'
        os.makedirs(temp_dir, exist_ok=True)

        # List all objects (images) in the source bucket
        blobs = source_bucket.list_blobs()

        for blob in blobs:
            if blob.name.lower().endswith(('.jpg', '.jpeg')):  
                image_data = blob.download_as_bytes()
                image = Image.open(BytesIO(image_data))

                results = model(image, conf=0.01)
                boxes = results[0].boxes
                for box in boxes:
                    if box.cls == class_name:
                        filtered_images.append(blob.name)
                        
                        # Copy the filtered image to the destination bucket
                        source_blob = source_bucket.blob(blob.name)
                        destination_blob = destination_bucket.blob(blob.name)
                        
                        # Download to a temporary file
                        temp_image_path = os.path.join(temp_dir, 'temp_image.jpg')
                        source_blob.download_to_filename(temp_image_path)
                        
                        # Upload to the destination bucket
                        destination_blob.upload_from_filename(temp_image_path)
                        break

        if not filtered_images:
            return "No images matching the criteria were found."
        
        success_message = "The images have been filtered and saved to the destination bucket."
        response_data = {'filtered_images': filtered_images, 'message': success_message}
        
        # Clean up the temporary directory
        shutil.rmtree(temp_dir, ignore_errors=True)

        return jsonify(response_data)

    else:
        return "Rider number not found in the list."

if __name__ == "__main__":
    app.run(debug=True)
